# 竹子识别系统一体化构建
cmake_minimum_required(VERSION 3.16)

project(BambooIntegratedSystem 
    VERSION 3.0.0
    DESCRIPTION "Integrated Bamboo Cutting System"
    LANGUAGES C CXX
)

# C++标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)

# 构建类型
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# 编译选项
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_options(-g -O0 -DDEBUG_MODE=1)
else()
    add_compile_options(-O3 -march=native -DNDEBUG)
endif()

message(STATUS "构建类型: ${CMAKE_BUILD_TYPE}")

# 架构检测
if(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
    set(TARGET_ARCH "aarch64")
    add_compile_definitions(TARGET_ARCH_AARCH64)
    message(STATUS "目标架构: ARM64 (Jetson)")
else()
    set(TARGET_ARCH "x86_64")
    add_compile_definitions(TARGET_ARCH_X86_64)
    message(STATUS "目标架构: x86_64")
endif()

# 查找依赖库
find_package(PkgConfig REQUIRED)
find_package(OpenCV REQUIRED)
find_package(Threads REQUIRED)

# GStreamer
pkg_check_modules(GSTREAMER REQUIRED 
    gstreamer-1.0 
    gstreamer-app-1.0
)

# CUDA和TensorRT (可选)
find_package(CUDA QUIET)
if(CUDA_FOUND)
    enable_language(CUDA)
    add_compile_definitions(ENABLE_CUDA=1)
    message(STATUS "CUDA支持: 启用")
    
    # 查找TensorRT
    find_path(TENSORRT_INCLUDE_DIR NvInfer.h 
        HINTS /usr/include/x86_64-linux-gnu /usr/local/cuda/include)
    find_library(TENSORRT_LIBRARY nvinfer 
        HINTS /usr/lib/x86_64-linux-gnu /usr/local/cuda/lib64)
    
    if(TENSORRT_INCLUDE_DIR AND TENSORRT_LIBRARY)
        add_compile_definitions(ENABLE_TENSORRT=1)
        message(STATUS "TensorRT支持: 启用")
    else()
        message(STATUS "TensorRT支持: 未找到")
    endif()
else()
    message(STATUS "CUDA支持: 未找到")
endif()

# SystemD (可选)
pkg_check_modules(SYSTEMD libsystemd)
if(SYSTEMD_FOUND)
    add_compile_definitions(ENABLE_SYSTEMD=1)
    message(STATUS "SystemD支持: 启用")
endif()

# 包含目录
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/cpp_backend/include
    ${CMAKE_CURRENT_SOURCE_DIR}/lvgl_frontend/include
    ${OpenCV_INCLUDE_DIRS}
    ${GSTREAMER_INCLUDE_DIRS}
)

if(CUDA_FOUND)
    include_directories(${CUDA_INCLUDE_DIRS})
    if(TENSORRT_INCLUDE_DIR)
        include_directories(${TENSORRT_INCLUDE_DIR})
    endif()
endif()

# 收集源文件
# 后端源文件 (排除原main.cpp)
file(GLOB_RECURSE BACKEND_SOURCES 
    "cpp_backend/src/communication/*.cpp"
    "cpp_backend/src/core/*.cpp"
    "cpp_backend/src/vision/*.cpp"
)

# 前端源文件 (排除原main.cpp) 
file(GLOB_RECURSE FRONTEND_SOURCES
    "lvgl_frontend/src/gui/*.cpp"
    "lvgl_frontend/src/display/*.cpp"
    "lvgl_frontend/src/input/*.cpp"
    "lvgl_frontend/src/system/*.c"
    "lvgl_frontend/src/app/*.cpp"
    "lvgl_frontend/src/camera/*.cpp"
    "lvgl_frontend/src/backend/*.cpp"
)

# LVGL库源文件 (如果存在)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/lvgl_frontend/lvgl")
    file(GLOB_RECURSE LVGL_SOURCES
        "lvgl_frontend/lvgl/src/*.c"
    )
else()
    message(WARNING "LVGL源码目录不存在，请确保已下载LVGL库")
    set(LVGL_SOURCES "")
endif()

# 创建一体化可执行文件
add_executable(bamboo_integrated
    # 新的一体化主程序
    integrated_main.cpp
    
    # 现有后端源文件
    ${BACKEND_SOURCES}
    
    # 现有前端源文件  
    ${FRONTEND_SOURCES}
    
    # LVGL库源文件
    ${LVGL_SOURCES}
)

# 编译定义
target_compile_definitions(bamboo_integrated PRIVATE
    BAMBOO_CUT_VERSION="3.0.0"
    TARGET_ARCH="${TARGET_ARCH}"
    MODELS_PATH="${CMAKE_CURRENT_SOURCE_DIR}/models"
    CONFIG_PATH="${CMAKE_CURRENT_SOURCE_DIR}/config"
    LV_CONF_INCLUDE_SIMPLE=1
)

# 编译选项
target_compile_options(bamboo_integrated PRIVATE
    ${GSTREAMER_CFLAGS_OTHER}
    -Wall -Wextra -Wno-unused-parameter
    -fPIC
)

if(SYSTEMD_FOUND)
    target_compile_options(bamboo_integrated PRIVATE ${SYSTEMD_CFLAGS_OTHER})
endif()

# 链接库
target_link_libraries(bamboo_integrated
    # OpenCV
    ${OpenCV_LIBS}
    
    # GStreamer
    ${GSTREAMER_LIBRARIES}
    
    # 系统库
    Threads::Threads
    pthread
    m
    dl
)

# CUDA链接
if(CUDA_FOUND)
    target_link_libraries(bamboo_integrated ${CUDA_LIBRARIES})
    if(TENSORRT_LIBRARY)
        target_link_libraries(bamboo_integrated ${TENSORRT_LIBRARY})
    endif()
endif()

# SystemD链接
if(SYSTEMD_FOUND)
    target_link_libraries(bamboo_integrated ${SYSTEMD_LIBRARIES})
endif()

# 检查必要文件是否存在
if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/cpp_backend/include")
    message(FATAL_ERROR "后端头文件目录不存在: cpp_backend/include")
endif()

if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/lvgl_frontend/include")
    message(FATAL_ERROR "前端头文件目录不存在: lvgl_frontend/include")
endif()

# 安装规则
install(TARGETS bamboo_integrated
    DESTINATION /opt/bamboo-cut/bin
)

install(DIRECTORY models/
    DESTINATION /opt/bamboo-cut/models
    FILES_MATCHING PATTERN "*.pt" PATTERN "*.onnx" PATTERN "*.trt"
    OPTIONAL
)

install(DIRECTORY config/
    DESTINATION /opt/bamboo-cut/config
    FILES_MATCHING PATTERN "*.xml" PATTERN "*.yaml" PATTERN "*.json"
    OPTIONAL
)

# 创建启动脚本
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/scripts/start_integrated.sh.in"
    "${CMAKE_CURRENT_BINARY_DIR}/start_integrated.sh"
    @ONLY
)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/start_integrated.sh"
    DESTINATION /opt/bamboo-cut/bin
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
                GROUP_READ GROUP_EXECUTE
                WORLD_READ WORLD_EXECUTE
)

# 构建信息总结
message(STATUS "=====================================")
message(STATUS "竹子识别系统一体化构建配置")
message(STATUS "=====================================")
message(STATUS "版本: ${PROJECT_VERSION}")
message(STATUS "架构: ${TARGET_ARCH}")
message(STATUS "构建类型: ${CMAKE_BUILD_TYPE}")
message(STATUS "OpenCV版本: ${OpenCV_VERSION}")
message(STATUS "CUDA支持: ${CUDA_FOUND}")
message(STATUS "SystemD支持: ${SYSTEMD_FOUND}")
message(STATUS "=====================================")

# 输出源文件统计
list(LENGTH BACKEND_SOURCES BACKEND_COUNT)
list(LENGTH FRONTEND_SOURCES FRONTEND_COUNT)
list(LENGTH LVGL_SOURCES LVGL_COUNT)

message(STATUS "源文件统计:")
message(STATUS "  后端源文件: ${BACKEND_COUNT}")
message(STATUS "  前端源文件: ${FRONTEND_COUNT}")
message(STATUS "  LVGL源文件: ${LVGL_COUNT}")

# 性能优化提示
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    message(STATUS "")
    message(STATUS "性能优化已启用:")
    message(STATUS "  - 编译优化: -O3 -march=native")
    message(STATUS "  - 建议在目标硬件上编译")
    if(TARGET_ARCH STREQUAL "aarch64")
        message(STATUS "  - Jetson平台: 建议启用GPU内存池")
    endif()
endif()